# Grupo: Hackintosh Brasil
# Autor: Jonas Wander
#
# Compat√≠vel com MaciASL (fork Rehabman)
# https://bitbucket.org/RehabMan/os-x-maciasl-patchmatic/downloads/
# 
# HP Laptop 15-da1xxx 

# METHOD FOR 16 BITS - CREDITS REHABMAN
into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized) { Return(Or(Arg0, ShiftLeft(Arg1, 8))) }\n
end;

# METHODS FOR MORE THAN 32 BITS - CREDITS REHABMAN
into method label RE1B parent_label EC0 remove_entry;
into method label RECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
{\n
    ShiftRight(Add(Arg1,7), 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;

# FIX 16 BITS

into device label EC0 code_regex BRC0,\s+16 replace_matched begin RC00,8,RC01,8 end;
into device label EC0 code_regex BPV0,\s+16 replace_matched begin PV00,8,PV01,8 end;
into device label EC0 code_regex BDV0,\s+16 replace_matched begin DV00,8,DV01,8 end;
into device label EC0 code_regex BDC0,\s+16 replace_matched begin DC00,8,DC01,8 end;
into device label EC0 code_regex BFC0,\s+16 replace_matched begin FC00,8,FC01,8 end;
into device label EC0 code_regex BAC0,\s+16 replace_matched begin AC00,8,AC01,8 end;
into device label EC0 code_regex BFCB,\s+16 replace_matched begin BF00,8,BF01,8 end;
into device label EC0 code_regex BTPB,\s+16 replace_matched begin TP00,8,TP01,8 end;

Into method label BIFX code_regex \(\^\^EC0.BDC0 replaceall_matched begin (B1B2(\^\^EC0.DC00,\^\^EC0.DC01) end;
into method label BIFX code_regex \(\^\^EC0.BDV0 replaceall_matched begin (B1B2(\^\^EC0.DV00,\^\^EC0.DV01) end;
into method label BIFX code_regex \(\^\^EC0.BFCB replaceall_matched begin (B1B2(\^\^EC0.BF00,\^\^EC0.BF01) end;
into method label BIFX code_regex \(\^\^EC0.BFC0 replaceall_matched begin (B1B2(\^\^EC0.FC00,\^\^EC0.FC01) end;

into method label _BST code_regex \(\^\^EC0.BAC0 replaceall_matched begin (B1B2(\^\^EC0.AC00,\^\^EC0.AC01) end;
into method label _BST code_regex \^\^EC0.BPV0 replaceall_matched begin B1B2(\^\^EC0.PV00,\^\^EC0.PV01) end;
into method label _BST code_regex \(\^\^EC0.BRC0 replaceall_matched begin (B1B2(\^\^EC0.RC00,\^\^EC0.RC01) end;
into method label _BST code_regex \(\^\^EC0.BDC0 replaceall_matched begin (B1B2(\^\^EC0.DC00,\^\^EC0.DC01) end;

into method label _BTP code_regex \^\^EC0.BTPB replaceall_matched begin B1B2(\^\^EC0.TP00,\^\^EC0.TP01) end;

# FIX MORE THAN 32 BITS

into device label EC0 code_regex (SMD0,)\s+(256) replace_matched begin SMDZ,%2,//%1%2 end;

into method label ESMC code_regex SMD0 replaceall_matched begin RECB(0x64,256) end;

# OTHER PATCHS

#RehabMan: fixing BAT1._STA logic bug 
into method label _STA parent_label BAT1 code_regex ([\s\S]*) replace_matched
begin
If(!ECON) { Return(0xf) }\n
%1
end;

into device label EC0 code_regex ERIB,\s+16 replace_matched begin ERI0,8,ERI1,8 end;
into method label EIDR code_regex Store\s+\(Arg0,\s+ERIB\) replace_matched 
begin
Store(Arg0, ERI0) Store(ShiftRight(Arg0, 8), ERI1)
end;
into method label EIDW code_regex Store\s+\(Arg0,\s+ERIB\) replace_matched
begin
Store(Arg0, ERI0) Store(ShiftRight(Arg0, 8), ERI1)
end;
